<!-------------------------------------------REVISION HISTORY---------------------------------------------
 [FLEX-118] Documents - Primary Content Header - Auto Populate using TOGGLE Fields
 [FLEX-132] Documents - Header automatic update 
 [FLEX-138] Documents - PDF Stamping / Non PDF Stamping, Secondary Format Setting (Effective Date)
 [FLEX-164] Documents - Header automatic update - MS Excel
 [FLEX-178] Documents - Header automatic update - MS PowerPoint + Auto update of MS Word & MS PowerPoint
 [FLEX-204] Documents - Header automatic update - MS Excel + other file formats
 [FLEX-216] Document - Header update not working for PPTX for revised documents
 [FLEX-324] Documents - Header update for PPTX issue
 [FLEX-429] Documents - Update Primary_Content (Online Collaboration)
 [FLEX-427] Documents - Update Primary Content (File Size Issue) - PPT
 [FLEX-457] Documents - Update Primary Content (File Size Issue) - DOCX & XLSX
 [FLEX-498] Documents- Update Primary Content- issue fixed the default filename
--------------------------------------------REVISION HISTORY---------------------------------------------->
<apex:page applyBodyTag="false" standardController="compliancequest__SQX_Controlled_Document__c" applyHtmlTag="false" showHeader="false">
    <apex:includeLightning />
    <apex:slds />
    <html>
        <head>
            <title>Adding concurrently multiple entries in a zip file</title>
            <apex:includeScript value="{! $Resource.jQuery }"/>
            <script src="{!URLFOR($Resource.ZipJS, 'zip.js-master/dist/zip.js')}"></script>
            <script type="text/javascript">__sfdcSessionId = '{!$Api.Session_Id}';</script> 
            <script src="../../soap/ajax/48.0/connection.js" type="text/javascript"></script>
         </head>
                <style>
                    .spinner {
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        z-index: 9999;
                        width: 50px;
                        height: 50px;
                        border-radius: 50%;
                        border: 3px solid #f3f3f3;
                        border-top: 3px solid #3498db;
                        animation: spin 1s infinite linear;
                    }
                    .toast-message {
                        background-color: #4CAF50;
                        color: #fff;
                        padding: 15px;
                        border-radius: 4px;
                        position: fixed;
                        top: 20px;
                        right: 43%;
                        z-index: 9999;
                    }
                    @keyframes spin {
                        0% {
                            transform: rotate(0deg);
                        }
                        100% {
                            transform: rotate(360deg);
                        }
                    }
                </style>
                <script>
                    window.addEventListener('DOMContentLoaded', function () {
                        var spinner = document.getElementById('spinner');
                        spinner.style.display = 'block'; // Show the spinner
                    });
                </script>
            
            <body>
                <div id="spinnerContainer" class="spinner-container">
                    <div id="spinner" class="spinner"></div>
                    <span id="spinner-text" class="spinner-text" style = " top: 67%;
                                                                          position : fixed;
                                                                          left: 52%;
                                                                          transform: translate(-50%, -50%);
                                                                          font-size: 14px;
                                                                          color: #333;
                                                                          font-weight: 900;">Loading...</span>
                </div>
                
                <div id="toastMessage" class="toast-message" style="display: none;">
                    Primary Content Updated Successfully.
                </div>
                
                <script type="module">
                import * as zip from "/resource/ZipJs/zip.js-master/index.js";
                var pptxFile = null;
                let cId = `{!$CurrentPage.parameters.cid}`; 
                let docTitle = `{!$CurrentPage.parameters.title}`;
                let docNumber = `{!$CurrentPage.parameters.docNumber}`;
                let docRev = `{!$CurrentPage.parameters.docRev}`;
                let docSite = `{!$CurrentPage.parameters.docSite}`;
                let ed = `{!$CurrentPage.parameters.ed}`;
                let recId = `{!$CurrentPage.parameters.id}`;
                let fileExtension = '';
                getZipFileBlob();
                
                async function getZipFileBlob() {
                    let API_VERSION = "v52.0";
                    let API_BASE_PATH = `/services/data/${API_VERSION}`;
                    let AUTH_HEADER = {"Authorization": "Bearer {!$Api.Session_Id}"};
                    let cId = `{!$CurrentPage.parameters.cid}`;
                    let GET_FILE_DETAILS_PATH = `/services/data/v52.0/query?q=SELECT+Id,+FileExtension,Title+FROM+ContentVersion+WHERE+ContentDocumentId+=+'{id}' +AND IsLatest = true`;
                    let url = GET_FILE_DETAILS_PATH.replace("{id}", `{!$CurrentPage.parameters.cid}`); 
                    let BLOB_DATA ;
                    // Make a GET request to fetch the ContentVersion record
                    $.ajax({
                    type: "GET",
                        url: url,
                            headers: {
                                "Authorization": "Bearer {!$Api.Session_ID}"
                            },
                                success: function (response) {
                                    // Handle successful response
                                    let headers = {
                                        headers: AUTH_HEADER
                                    }
                                    // Process the record as needed
                                    var title = response.records[0].Title;
                                    fileExtension = response.records[0].FileExtension;
                                    let FILE_DOWNLOAD_PATH = `${API_BASE_PATH}/sobjects/ContentVersion/${response.records[0].Id}/VersionData`;
                                    var contentVersionId = response.records[0].Id; // Example ContentVersion ID                       
                                    
                                    fetchVersionData(contentVersionId);    
                                },
                                error: function (error) {
                                    // Handle error
                                    console.log(error);
                                }
                    });
                }
                
                async function fetchVersionData(contentVersionId) {
                    showSpinner('Loading Content ....!');
                    
                    const response =  await fetch('/services/data/v53.0/sobjects/ContentVersion/' + contentVersionId + '/VersionData', {
                        headers: {
                            'Authorization': 'Bearer {!$Api.Session_ID}',
                            'Content-Type': 'application/json'
                        },
                        method: 'GET'
                    });
                    const blob = await response.blob();
                    if(blob != undefined){
                        var excelHeaderFiles = [];
                        if(fileExtension == 'pptx'){
                            const file = new File([blob], 'filename', {
                                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            });
                            readData(file, excelHeaderFiles, '', false);
                        }else if(fileExtension == 'docx'){
                            const file = new File([blob], 'filename', {
                                type: 'application/vnd.ms-word',
                            });
                            readData(file, excelHeaderFiles, '', false);
                        }else if(fileExtension == 'xlsx'){
                            const file = new File([blob], 'filename', {
                                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                            });
                            readData(file, excelHeaderFiles, '', false);
                        }
                    }    
                }
                
                async function readData(file, headerFiles, headerName, runAgain){
                    showSpinner('Updating headers ....!');
                    var headerFileName = '';
                    var excelHeaderFiles = [];
                    var arrayMap = [];
                    const reader = new zip.ZipReader(new zip.BlobReader(file));
                    const entries = await reader.getEntries();
                    
                    if (entries.length) {
                        await Promise.all(entries.map(async (entry) => {
                          if(fileExtension == 'xlsx' && runAgain == false){
                                if(entry.filename.indexOf('xl/worksheets/_rels/sheet') != -1){
                                    headerFileName = entry.filename.split('.rels')[0];
                                    headerFileName = headerFileName.replace('xl/worksheets/_rels/', '');
                                    excelHeaderFiles.push(headerFileName);
                                }
								}else{
									var fileNameToUpdate = '';
									if(runAgain == false){
										fileNameToUpdate = await getHeaderName(entry, fileExtension);
									}                          
									if(fileNameToUpdate != ''){
										readData(file, excelHeaderFiles, fileNameToUpdate, true);
									}
									if(headerName != ''){
										if(fileExtension == 'pptx'){
											if (entry.filename === 'ppt/slideMasters/'+headerName) {
												fetchXMLContent(entry, file, 'ppt/slideMasters/'+headerName);
											}
										}else  if(fileExtension == 'docx'){
											if (entry.filename === 'word/'+headerName) {
												fetchXMLContent(entry, file, 'word/'+headerName);
											}
										}
									}
								}
								if(fileExtension == 'xlsx' && runAgain == true){
									for(var i=0;i<headerFiles.length;i++){
										var filename = 'xl/worksheets/'+headerFiles[i];
										if(entry.filename == filename){
											var xmlContent = await fetchXMLContent(entry, file, filename);
											arrayMap.push(
												{"label": filename, "value": xmlContent}
											);
										}
									}
								} 
                        }));

                        if(arrayMap.length > 0){
                            getZipAsFileBlob('', file, '', arrayMap).then(blob => {
                                //reader.readAsBinaryString(blob);
                                 var newblob1 = new File([blob], docTitle+'.'+fileExtension, {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
                            	downloadFile(blob, newblob1);
                        	});
                        }
                        
                    	if(excelHeaderFiles.length > 0 && runAgain == false){
                            readData(file, excelHeaderFiles, headerFileName,  true);
                        }
                    }
                   	await reader.close();
                }
                
                function getHeaderName(entry, fileExtension){
                    var headerFileName = '';
                    if(fileExtension == 'pptx'){
                        if(entry.filename.indexOf('ppt/slideMasters/_rels/slideMaster') != -1){
                            headerFileName = entry.filename.split('.rels')[0];
                            headerFileName = headerFileName.replace('ppt/slideMasters/_rels/', '');
                        } 
                    }else if(fileExtension == 'docx'){
                        if(entry.filename.indexOf('word/_rels/header') != -1){
                            headerFileName = entry.filename.split('.rels')[0];
                            headerFileName = headerFileName.replace('word/_rels/', '');
                        }
                    }
                	return headerFileName;   
                }
                
                async function fetchXMLContent(entry, file, headerName){
                    if(fileExtension == 'docx' || fileExtension == 'pptx'){
                        var xmlContent = await entry.getData(new zip.TextWriter(), {}); 
                            var parser = new DOMParser();
                            var xmlDoc = parser.parseFromString(xmlContent, "application/xml");
                            
                            if(fileExtension == 'docx'){
                                var headerTextElement = xmlDoc.getElementsByTagName('w:p');
                                for (var i = 0; i < headerTextElement.length; i++) {
                                    for(var j=0; j<headerTextElement[i].getElementsByTagName('w:r').length;j++){
                                        var currentNode = headerTextElement[i].getElementsByTagName('w:r')[j];
                                        if (headerTextElement[i].getElementsByTagName('w:r')[j].textContent.includes('Document Number')) {
                                            var parentNode = headerTextElement[i];
                                            parentNode =  setWordHeaderProperties(xmlDoc, headerTextElement[i], 'Document Number', docNumber);                            
                                        }
                                        else if (headerTextElement[i].getElementsByTagName('w:r')[j].textContent.includes('Revision')) {
                                            parentNode =  setWordHeaderProperties(xmlDoc, headerTextElement[i], 'Revision', docRev);     
                                        }
                                        else if (headerTextElement[i].getElementsByTagName('w:r')[j].textContent.includes('Site')) {
                                            parentNode =  setWordHeaderProperties(xmlDoc, headerTextElement[i], 'Site', docSite);     
                                        }
                                        else  if (headerTextElement[i].getElementsByTagName('w:r')[j].textContent.includes('Title')) {
                                            parentNode =  setWordHeaderProperties(xmlDoc, headerTextElement[i], 'Title', docTitle); 
                                        }
                                    } 
                                }
                                
                                var xmlString = new XMLSerializer().serializeToString(xmlDoc.documentElement);
                                  
                                getZipAsFileBlob(xmlString, file, headerName).then(blob => {
                                    //reader.readAsBinaryString(blob);
                                    var newblob1 = new File([blob], docTitle+'.'+fileExtension, {type: 'application/vnd.ms-word'});
                                downloadFile(blob, newblob1);
								});
                            
							}
                        else if(fileExtension == 'pptx'){
                            var headerTextElement = xmlDoc.getElementsByTagName('a:p');
                            for (var i = 0; i < headerTextElement.length; i++) {
                                for(var j=0; j<headerTextElement[i].getElementsByTagName('a:r').length;j++){
                                    var currentNode = headerTextElement[i].getElementsByTagName('a:r')[j];
                                    if (headerTextElement[i].getElementsByTagName('a:r')[j].textContent.includes('Document Number')) {
                                        var parentNode = headerTextElement[i];
                                        parentNode =  setpptHeaderProperties(xmlDoc, headerTextElement[i], 'Document Number', docNumber);                            
                                    }
                                    else  if (headerTextElement[i].getElementsByTagName('a:r')[j].textContent.includes('Title')) {
                                        parentNode =  setpptHeaderProperties(xmlDoc, headerTextElement[i], 'Title', docTitle); 
                                    }
                                } 
                            }
                            var xmlString = new XMLSerializer().serializeToString(xmlDoc.documentElement);
                              
                            getZipAsFileBlob(xmlString, file, headerName).then(blob => {
                                //reader.readAsBinaryString(blob);
                                var newblob1 = new File([blob], docTitle+'.'+fileExtension, {type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'});
                            downloadFile(blob, newblob1);
							});
                        }
						}else if(fileExtension == 'xlsx'){
							var xmlContent = await entry.getData(new zip.TextWriter(), {}); 
							
							var parser = new DOMParser();
							var xmlDoc = parser.parseFromString(xmlContent, "application/xml");
							var headerTextElement = xmlDoc.getElementsByTagName('headerFooter');
							for (var i = 0; i < headerTextElement.length; i++) {
								for(var j=0; j<headerTextElement[i].getElementsByTagName('oddHeader').length;j++){
									if(headerTextElement[i].getElementsByTagName('oddHeader')[j].textContent.includes('Document Number - ')){
										var textContent = '&L&"Times New Roman"&11Document Number - '+docNumber+'\r\n';
										textContent += 'Revision - '+docRev+'\r\n';
										textContent += 'Site - '+docSite+'\r\n';
										textContent += 'Title - '+docTitle+'&R&G';
										headerTextElement[i].getElementsByTagName('oddHeader')[j].textContent = '';
										headerTextElement[i].getElementsByTagName('oddHeader')[j].textContent = textContent;
									}
								}
							}
							
							var xmlString = new XMLSerializer().serializeToString(xmlDoc.documentElement);
							
							return xmlString;
						}
                }
                
                async function getZipAsFileBlob(xmlcontent, file, headerName, arrayMap) {
                    if(fileExtension == 'docx'){
                        const reader = new zip.ZipReader(new zip.BlobReader(file));
                        const entries = await reader.getEntries();
                        const zipWriter = new zip.ZipWriter(new zip.BlobWriter("application/zip"));
                        if (entries.length) {
                            await Promise.all(entries.map(async (entry) => {
                                if(!entry.filename.includes('.xml') && !entry.filename.includes('.rels')){ 
                                	var blob = await entry.getData(new zip.BlobWriter(), {});
                                    zipWriter.add(entry.filename, new zip.BlobReader(blob));
                        		}
                        		else if(entry.filename === headerName){
                            		var xml = await entry.getData(new zip.TextWriter(), {});
                            		var xmlPre = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>';
                            		zipWriter.add(entry.filename, new zip.TextReader(xmlPre+'\r\n'+xmlcontent));
                        		}
                            	else{
                                	var xml = await entry.getData(new zip.TextWriter(), {});
                                	zipWriter.add(entry.filename, new zip.TextReader(xml));
                            	}
							}));
						}
						return zipWriter.close();
					}
					else  if(fileExtension == 'pptx'){
						const reader = new zip.ZipReader(new zip.BlobReader(file));
						const entries = await reader.getEntries();
						const zipWriter = new zip.ZipWriter(new zip.BlobWriter("application/zip"));
						if (entries.length) {	
							await Promise.all(entries.map(async (entry) => {
								if(!entry.filename.includes('.xml') && !entry.filename.includes('.rels')){ 
								var blob = await entry.getData(new zip.BlobWriter(), {});
											  zipWriter.add(entry.filename, new zip.BlobReader(blob));
								}
								else if(entry.filename === headerName){
									var xml = await entry.getData(new zip.TextWriter(), {});									var xmlPre = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>';
									zipWriter.add(entry.filename, new zip.TextReader(xmlPre+'\r\n'+xmlcontent));
								}
								else{
									var xml = await entry.getData(new zip.TextWriter(), {});
									zipWriter.add(entry.filename, new zip.TextReader(xml));
								}
							}));
						}
						return zipWriter.close();
					}
					else  if(fileExtension == 'xlsx'){
						const reader = new zip.ZipReader(new zip.BlobReader(file));
						const entries = await reader.getEntries();
						const zipWriter = new zip.ZipWriter(new zip.BlobWriter("application/zip"));
						if (entries.length) {
							await Promise.all(entries.map(async (entry) => {
								if(!entry.filename.includes('.xml') && !entry.filename.includes('.rels')){ 
									var blob = await entry.getData(new zip.BlobWriter(), {});
									zipWriter.add(entry.filename, new zip.BlobReader(blob));
								}
								else if(entry.filename.includes('xl/worksheets/sheet') && !entry.filename.includes('.rels')){
									for(var i=0;i<arrayMap.length;i++){
										if(entry.filename == arrayMap[i].label){
											var xml = await entry.getData(new zip.TextWriter(), {});
											var xmlPre = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>';
											zipWriter.add(entry.filename, new zip.TextReader(xmlPre+'\r\n'+arrayMap[i].value));
										}
									}
								}
								else{
									var xml = await entry.getData(new zip.TextWriter(), {});
									zipWriter.add(entry.filename, new zip.TextReader(xml));
								}
							}));
						}
						return zipWriter.close();
					}
                } 
                
                function setpptHeaderProperties(xmlDoc, parentNode, headerProperty, headerValue) {
                    var childNodesSize = parentNode.childNodes.length - 1;
                    for(var k=childNodesSize;k>0;k--){
                        if(parentNode.childNodes[k] != undefined){
                            parentNode.removeChild(parentNode.childNodes[k]);
                        } 
                    }
                    var childNode2 = xmlDoc.createElement("a:r");
                    var grandchildNode1 = xmlDoc.createElement("a:rPr");
                    grandchildNode1.setAttribute("lang", "en-us");
                    grandchildNode1.setAttribute("sz", "1100");
                    grandchildNode1.setAttribute("b", "0");
                    grandchildNode1.setAttribute("dirty", "0");
                    var grandchildNode1ChildNode = xmlDoc.createElement("a:latin");
                    grandchildNode1ChildNode.setAttribute("typeface", "Times New Roman");
                    grandchildNode1ChildNode.setAttribute("panose", "02020603050405020304");
                    grandchildNode1ChildNode.setAttribute("pitchFamily", "18");
                    grandchildNode1ChildNode.setAttribute("charset", "0");
                    var grandchildNode1ChildNode1 = xmlDoc.createElement("a:cs");
                    grandchildNode1ChildNode1.setAttribute("typeface", "Times New Roman");
                    grandchildNode1ChildNode1.setAttribute("panose", "02020603050405020304");
                    grandchildNode1ChildNode1.setAttribute("pitchFamily", "18");
                    grandchildNode1ChildNode1.setAttribute("charset", "0");
                    grandchildNode1.appendChild(grandchildNode1ChildNode);
                    grandchildNode1.appendChild(grandchildNode1ChildNode1);
                    var grandChildNode2 = xmlDoc.createElement("a:t");
                    var grandChildTwoTextNode;
                    if(headerProperty == 'Document Number'){
                        grandChildTwoTextNode = xmlDoc.createTextNode("Document Number - "+headerValue+"\t\t\t"+"Revision - "+docRev+"\t\t\t"+"Site - "+docSite);    
                    }else{
                        grandChildTwoTextNode = xmlDoc.createTextNode(headerProperty+" - "+headerValue+"\t\t\t");        
                    } 
                    grandChildNode2.appendChild(grandChildTwoTextNode);
                    childNode2.appendChild(grandchildNode1);
                    childNode2.appendChild(grandChildNode2);
                    parentNode.appendChild(childNode2);
                    return parentNode;
                }  
				
                function setWordHeaderProperties(xmlDoc, parentNode, headerProperty, headerValue){
                    var childNodesSize = parentNode.childNodes.length - 1;
                    for(var k=childNodesSize;k>0;k--){
                        if(parentNode.childNodes[k] != undefined){
                            parentNode.removeChild(parentNode.childNodes[k]);
                        } 
                    }
                    var childNode2 = xmlDoc.createElement("w:r");
                    var grandChildNode1 = xmlDoc.createElement("w:rpr");      
                    var grandChildNode1Node = xmlDoc.createElement("w:rFonts");
                    grandChildNode1Node.setAttribute("w:ascii", "Times New Roman");
                    grandChildNode1Node.setAttribute("w:hAnsi", "Times New Roman");
                    grandChildNode1Node.setAttribute("w:cs", "Times New Roman"); 
                    var grandChildNode1Node0 = xmlDoc.createElement("w:b"); 
                    var grandChildNode1Node1 = xmlDoc.createElement("w:bCs");         
                    var grandChildNode1Node2 = xmlDoc.createElement("w:sz"); 
                    grandChildNode1Node2.setAttribute("w:val", "24");
                    var grandChildNode1Node3 = xmlDoc.createElement("w:szCs"); 
                    grandChildNode1Node3.setAttribute("w:val", "24");           
                    var grandChildNode2 = xmlDoc.createElement("w:t");
                    var grandChildTwoTextNode = xmlDoc.createTextNode(headerProperty+' - '+headerValue);
                    grandChildNode2.appendChild(grandChildTwoTextNode);
                    grandChildNode1.appendChild(grandChildNode1Node); 
                    grandChildNode1.appendChild(grandChildNode1Node0); 
                    grandChildNode1.appendChild(grandChildNode1Node1);
                    grandChildNode1.appendChild(grandChildNode1Node2); 
                    grandChildNode1.appendChild(grandChildNode1Node3);          
                    childNode2.appendChild(grandChildNode1);
                    childNode2.appendChild(grandChildNode2);        
                    parentNode.appendChild(childNode2); 
                    return parentNode;
                }
                
                async function downloadFile(blob, file) {
                    uploadFile(file.name, blob, file, '{!$Api.Session_Id}');
                }
                
                async function uploadFile(filename, blob, file, sessionId){
                    showSpinner('Updating File ....!');
                    var formdata = new FormData();
                    const metadata = {
                        'Title': docTitle,
                        'PathOnClient': docTitle+'.'+fileExtension,
                        'Origin': "H",
                        'ContentDocumentId': cId
                    };
                    let entityContent = new Blob([JSON.stringify(metadata)], { type: "application/json" });
                    let versionData = new Blob([file], { type: "application/octet-stream" });
                    formdata.append("entity_content", entityContent, "");
                    formdata.append("VersionData", versionData, filename);
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '/services/data/v52.0/sobjects/ContentVersion', true);
                    xhr.setRequestHeader('Accept', '*/*');
                    xhr.setRequestHeader('Cache-Control', 'no-cache'); 
                    xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
                    xhr.setRequestHeader('Authorization',  'Bearer '+sessionId);
                    xhr.onload = function() {
                    if (xhr.status === 200 || xhr.status === 201) {
                        var spinnerContainer = document.getElementById('spinnerContainer');
                        spinnerContainer.style.display = 'none';
                        
                        // Request succeeded
                        var contentDocumentLink = new sforce.SObject('ContentDocumentLink');
                        contentDocumentLink.ContentDocumentId = cId;
                        contentDocumentLink.LinkedEntityId = recId;
                        contentDocumentLink.ShareType = 'I'; 
                        var results2 = sforce.connection.create([contentDocumentLink]);
                        const a = document.createElement('a');
                        a.href = URL.createObjectURL(file);
                        document.body.appendChild(a);
                        a.download = docTitle+'.'+fileExtension;
                        a.click(); 
                        hideSpinner();
                       showToast();
                    }else {
                        // Request failed
                        showSpinner(xhr.responseText);
                        document.addEventListener("DOMContentLoaded", function() {
                            var spinnerContainer = document.getElementById('spinnerContainer');
                            spinnerContainer.style.display = 'none';
                        });
                    }
                };
            	xhr.send(formdata); 
            }
            
            function showToast() {
                var toastElement = document.getElementById('toastMessage');
                toastElement.style.display = 'block';
                setTimeout(function() {
                    toastElement.style.display = 'none';
                }, 10000); // Hide the toast after 3 seconds
            }
            
            
            function showSpinner(text) {
                var spinnerText = document.getElementById('spinner-text');
                spinnerText.textContent = text;
            }
            
            function hideSpinner() {
                spinnerContainer.style.display = 'none';
            }      
            </script>
            <!-- / SPINNER -->
        </body>
    </html> 
</apex:page>